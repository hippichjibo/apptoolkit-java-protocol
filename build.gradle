/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

def getRepositoryUsername() {
    return hasProperty('artifactory_user') ? artifactory_user : ""
}

def getRepositoryPassword() {
    return hasProperty('artifactory_password') ? artifactory_password : ""
}

def getReleaseRepositoryUrl() {
    return hasProperty('artifactory_contextUrl') ? artifactory_contextUrl
            : "http://artifactory.jibo.com/artifactory/Android_maven"
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def mavenUser = properties.getProperty('mavenUser')
def mavenPassword = properties.getProperty('mavenPassword')

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

configurations {
    doclava
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.code.gson:gson:2.7'
    implementation 'org.json:json:20171018'
    implementation 'com.squareup.okhttp3:okhttp:3.8.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    doclava 'com.google.doclava:doclava:1.0.6'
}

task generateJavadoc(type: Javadoc, dependsOn: project.configurations.doclava) {
    failOnError = true
    title = null
    source = sourceSets.main.allJava
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = configurations.doclava.files.asType(List)
    destinationDir = file("./javadocs/")
}


// afterEvaluate { project ->
//     uploadArchives {
//         repositories {
//             mavenDeployer {
//                 beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

//                 //repository(url: "~/.m2/repository")

// println("GOT HERE")
//                 // repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                 //     authentication(userName: "$mavenUser", password: "$mavenPassword")
//                 // }

//                 // snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                 //     authentication(userName: "$mavenUser", password: "$mavenPassword")
//                 // }

//                 pom.groupId = GROUP
//                 pom.version = project.VERSION_NAME

//                 pom.project {
//                     name POM_NAME
//                     packaging POM_PACKAGING
//                     description POM_DESCRIPTION
//                     url POM_URL

//                     scm {
//                         url POM_SCM_URL
//                         connection POM_SCM_CONNECTION
//                         developerConnection POM_SCM_DEV_CONNECTION
//                     }

//                     licenses {
//                         license {
//                             name POM_LICENSE_NAME
//                             url POM_LICENSE_URL
//                             distribution POM_LICENSE_DIST
//                         }
//                     }

//                     developers {
//                         developer {
//                             id POM_DEVELOPER_ID
//                             name POM_DEVELOPER_NAME
//                         }
//                     }
//                     dependencies {
//                         dependency {
//                             groupId 'com.google.code.gson'
//                             artifactId 'gson'
//                             version '2.7'
//                         }
//                         dependency {
//                             groupId 'org.json'
//                             artifactId 'json'
//                             version '20171018'
//                         }
//                     }
//                 }
//             }
//         }
//     }

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task packageJavadoc(type: Jar, dependsOn: 'generateJavadoc') {
    from file("./javadocs/")
        classifier = 'javadoc'
}

task sourcesJar ( type: Jar, dependsOn: classes ) {
    classifier 'sources'
    from sourceSets.main.allJava
}

afterEvaluate {
    tasks.whenTaskAdded { task ->
        if (task.name == 'deploy') {
            task.dependsOn 'copyNativeLibs'
        }
    }
}

task deploy {
    afterEvaluate {
        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    pom.groupId = GROUP
                    pom.version = project.VERSION_NAME

                    println(" publishing to central repo ")

                    // Internal artifactory
                    //repository(url: getReleaseRepositoryUrl()) {
                    //    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    //}

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: mavenUser, password: mavenPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: mavenUser, password: mavenPassword)
                    }

                    pom.project {
                        name POM_NAME
                        packaging POM_PACKAGING
                        description POM_DESCRIPTION
                        url POM_URL

                        scm {
                            url POM_SCM_URL
                            connection POM_SCM_CONNECTION
                            developerConnection POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name POM_LICENSE_NAME
                                url POM_LICENSE_URL
                                distribution POM_LICENSE_DIST
                            }
                        }

                        developers {
                            developer {
                                id POM_DEVELOPER_ID
                                name POM_DEVELOPER_NAME
                            }
                        }
                        dependencies {
                            dependency {
                                groupId 'com.google.code.gson'
                                artifactId 'gson'
                                version '2.7'
                            }
                            dependency {
                                groupId 'org.json'
                                artifactId 'json'
                                version '20171018'
                            }
                        }
                    }
                }
            }
        }
        artifacts {
            archives jar
            archives sourcesJar
            archives packageJavadoc
        }
    }   
}

    
