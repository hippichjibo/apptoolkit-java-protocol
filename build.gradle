/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'signing'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

def getRepositoryUsername() {
    return hasProperty('artifactory_user') ? artifactory_user : ""
}

def getRepositoryPassword() {
    return hasProperty('artifactory_password') ? artifactory_password : ""
}

def getReleaseRepositoryUrl() {
    return hasProperty('artifactory_contextUrl') ? artifactory_contextUrl
            : "http://artifactory.jibo.com/artifactory/Android_maven"
}

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

configurations {
    doclava
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.code.gson:gson:2.7'
    implementation 'org.json:json:20171018'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    doclava 'com.google.doclava:doclava:1.0.6'
}

task generateJavadoc(type: Javadoc, dependsOn: project.configurations.doclava) {
    failOnError = true
    title = null
    source = sourceSets.main.allJava
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = configurations.doclava.files.asType(List)
    destinationDir = file("./javadocs/")
}


afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                //repository(url: "~/.m2/repository")

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.groupId = GROUP
                pom.version = project.VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                    dependencies {
                        dependency {
                            groupId 'com.google.code.gson'
                            artifactId 'gson'
                            version '2.7'
                        }
                        dependency {
                            groupId 'org.json'
                            artifactId 'json'
                            version '20171018'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task packageJavadoc(type: Jar, dependsOn: 'generateJavadoc') {
        from file("./javadocs/")
          classifier = 'javadoc'
    }

    task sourcesJar ( type: Jar, dependsOn: classes ) {
        classifier 'sources'
        from sourceSets.main.allJava
    }

    artifacts {
        archives jar
        archives packageJavadoc
    }
}
